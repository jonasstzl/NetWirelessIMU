
N1_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000798  0000082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080010a  0080010a  00000836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c9d  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dac  00000000  00000000  000026ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da4  00000000  00000000  00003459  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000827  00000000  00000000  00004574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b15  00000000  00000000  00004d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000058b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_7>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e9       	ldi	r30, 0x98	; 152
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	aa e0       	ldi	r26, 0x0A	; 10
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ab 32       	cpi	r26, 0x2B	; 43
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 f7 02 	call	0x5ee	; 0x5ee <main>
  e2:	0c 94 ca 03 	jmp	0x794	; 0x794 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
{
	uint8_t rv;
	rv = SPI_Read_Byte(OBSERVE_TX);
	rv = rv & 0x0F;
	return rv;
}
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	51 9a       	sbi	0x0a, 1	; 10
  fe:	50 98       	cbi	0x0a, 0	; 10
 100:	3e 9a       	sbi	0x07, 6	; 7
 102:	3f 9a       	sbi	0x07, 7	; 7
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	46 98       	cbi	0x08, 6	; 8
 10a:	47 9a       	sbi	0x08, 7	; 8
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	30 e7       	ldi	r19, 0x70	; 112
 110:	42 e0       	ldi	r20, 0x02	; 2
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <AVR_Init+0x28>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <AVR_Init+0x32>
 11c:	00 00       	nop
 11e:	46 9a       	sbi	0x08, 6	; 8
 120:	47 98       	cbi	0x08, 7	; 8
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	30 e7       	ldi	r19, 0x70	; 112
 126:	42 e0       	ldi	r20, 0x02	; 2
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	40 40       	sbci	r20, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <AVR_Init+0x3e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <AVR_Init+0x48>
 132:	00 00       	nop
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	41 f7       	brne	.-48     	; 0x108 <AVR_Init+0x1e>
 138:	46 98       	cbi	0x08, 6	; 8
 13a:	47 98       	cbi	0x08, 7	; 8
 13c:	8f e7       	ldi	r24, 0x7F	; 127
 13e:	9f e4       	ldi	r25, 0x4F	; 79
 140:	22 e1       	ldi	r18, 0x12	; 18
 142:	81 50       	subi	r24, 0x01	; 1
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <AVR_Init+0x58>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <AVR_Init+0x62>
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <UART_Init>:
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
 158:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
 15c:	e8 ec       	ldi	r30, 0xC8	; 200
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	80 83       	st	Z, r24
 166:	ea ec       	ldi	r30, 0xCA	; 202
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	86 60       	ori	r24, 0x06	; 6
 16e:	80 83       	st	Z, r24
 170:	e9 ec       	ldi	r30, 0xC9	; 201
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 61       	ori	r24, 0x18	; 24
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <UART_Tx>:
 17c:	e8 ec       	ldi	r30, 0xC8	; 200
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	95 ff       	sbrs	r25, 5
 184:	fd cf       	rjmp	.-6      	; 0x180 <UART_Tx+0x4>
 186:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
 18a:	08 95       	ret

0000018c <BNO_Init>:
 18c:	80 e5       	ldi	r24, 0x50	; 80
 18e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_start_wait>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_write>
 198:	81 e5       	ldi	r24, 0x51	; 81
 19a:	0e 94 96 03 	call	0x72c	; 0x72c <i2c_rep_start>
 19e:	0e 94 bf 03 	call	0x77e	; 0x77e <i2c_readNak>
 1a2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Chip_ID>
 1a6:	0e 94 99 03 	call	0x732	; 0x732 <i2c_stop>
 1aa:	80 e5       	ldi	r24, 0x50	; 80
 1ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_start_wait>
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_write>
 1b6:	80 e2       	ldi	r24, 0x20	; 32
 1b8:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_write>
 1bc:	0e 94 99 03 	call	0x732	; 0x732 <i2c_stop>
 1c0:	2f e7       	ldi	r18, 0x7F	; 127
 1c2:	8f e4       	ldi	r24, 0x4F	; 79
 1c4:	92 e1       	ldi	r25, 0x12	; 18
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <BNO_Init+0x3a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <BNO_Init+0x44>
 1d0:	00 00       	nop
 1d2:	80 e5       	ldi	r24, 0x50	; 80
 1d4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_start_wait>
 1d8:	8d e3       	ldi	r24, 0x3D	; 61
 1da:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_write>
 1de:	8c e0       	ldi	r24, 0x0C	; 12
 1e0:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_write>
 1e4:	0e 94 99 03 	call	0x732	; 0x732 <i2c_stop>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	80 e7       	ldi	r24, 0x70	; 112
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <BNO_Init+0x62>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <BNO_Init+0x6c>
 1f8:	00 00       	nop
 1fa:	08 95       	ret

000001fc <BNO_Read_Quaternions>:
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	80 e5       	ldi	r24, 0x50	; 80
 202:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_start_wait>
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_write>
 20c:	81 e5       	ldi	r24, 0x51	; 81
 20e:	0e 94 96 03 	call	0x72c	; 0x72c <i2c_rep_start>
 212:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 216:	ca e0       	ldi	r28, 0x0A	; 10
 218:	d1 e0       	ldi	r29, 0x01	; 1
 21a:	8a 83       	std	Y+2, r24	; 0x02
 21c:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 220:	8b 83       	std	Y+3, r24	; 0x03
 222:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 226:	8c 83       	std	Y+4, r24	; 0x04
 228:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 22c:	8d 83       	std	Y+5, r24	; 0x05
 22e:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 232:	8e 83       	std	Y+6, r24	; 0x06
 234:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 238:	8f 83       	std	Y+7, r24	; 0x07
 23a:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 23e:	88 87       	std	Y+8, r24	; 0x08
 240:	0e 94 bf 03 	call	0x77e	; 0x77e <i2c_readNak>
 244:	89 87       	std	Y+9, r24	; 0x09
 246:	0e 94 99 03 	call	0x732	; 0x732 <i2c_stop>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <BNO_Read_Acc_Mag_Gyr>:
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	80 e5       	ldi	r24, 0x50	; 80
 256:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_start_wait>
 25a:	88 e0       	ldi	r24, 0x08	; 8
 25c:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_write>
 260:	81 e5       	ldi	r24, 0x51	; 81
 262:	0e 94 96 03 	call	0x72c	; 0x72c <i2c_rep_start>
 266:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 26a:	c4 e1       	ldi	r28, 0x14	; 20
 26c:	d1 e0       	ldi	r29, 0x01	; 1
 26e:	8a 83       	std	Y+2, r24	; 0x02
 270:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 274:	8b 83       	std	Y+3, r24	; 0x03
 276:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 27a:	8c 83       	std	Y+4, r24	; 0x04
 27c:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 280:	8d 83       	std	Y+5, r24	; 0x05
 282:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 286:	8e 83       	std	Y+6, r24	; 0x06
 288:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 28c:	8f 83       	std	Y+7, r24	; 0x07
 28e:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 292:	88 87       	std	Y+8, r24	; 0x08
 294:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 298:	89 87       	std	Y+9, r24	; 0x09
 29a:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 29e:	8a 87       	std	Y+10, r24	; 0x0a
 2a0:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 2a4:	8b 87       	std	Y+11, r24	; 0x0b
 2a6:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 2aa:	8c 87       	std	Y+12, r24	; 0x0c
 2ac:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 2b0:	8d 87       	std	Y+13, r24	; 0x0d
 2b2:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 2b6:	8e 87       	std	Y+14, r24	; 0x0e
 2b8:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 2bc:	8f 87       	std	Y+15, r24	; 0x0f
 2be:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 2c2:	88 8b       	std	Y+16, r24	; 0x10
 2c4:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 2c8:	89 8b       	std	Y+17, r24	; 0x11
 2ca:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 2ce:	8a 8b       	std	Y+18, r24	; 0x12
 2d0:	0e 94 bf 03 	call	0x77e	; 0x77e <i2c_readNak>
 2d4:	8b 8b       	std	Y+19, r24	; 0x13
 2d6:	0e 94 99 03 	call	0x732	; 0x732 <i2c_stop>
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <SPI_Init>:
 2e0:	25 9a       	sbi	0x04, 5	; 4
 2e2:	20 9a       	sbi	0x04, 0	; 4
 2e4:	22 9a       	sbi	0x04, 2	; 4
 2e6:	21 9a       	sbi	0x04, 1	; 4
 2e8:	23 98       	cbi	0x04, 3	; 4
 2ea:	8c b5       	in	r24, 0x2c	; 44
 2ec:	80 65       	ori	r24, 0x50	; 80
 2ee:	8c bd       	out	0x2c, r24	; 44
 2f0:	8c b5       	in	r24, 0x2c	; 44
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	8c bd       	out	0x2c, r24	; 44
 2f6:	8c b5       	in	r24, 0x2c	; 44
 2f8:	8d 7f       	andi	r24, 0xFD	; 253
 2fa:	8c bd       	out	0x2c, r24	; 44
 2fc:	8d b5       	in	r24, 0x2d	; 45
 2fe:	81 60       	ori	r24, 0x01	; 1
 300:	8d bd       	out	0x2d, r24	; 45
 302:	28 9a       	sbi	0x05, 0	; 5
 304:	2d 98       	cbi	0x05, 5	; 5
 306:	8f e1       	ldi	r24, 0x1F	; 31
 308:	9e e4       	ldi	r25, 0x4E	; 78
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <SPI_Init+0x2a>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <SPI_Init+0x30>
 310:	00 00       	nop
 312:	08 95       	ret

00000314 <SPI_Tranceiver>:
 314:	8e bd       	out	0x2e, r24	; 46
 316:	0d b4       	in	r0, 0x2d	; 45
 318:	07 fe       	sbrs	r0, 7
 31a:	fd cf       	rjmp	.-6      	; 0x316 <SPI_Tranceiver+0x2>
 31c:	8e b5       	in	r24, 0x2e	; 46
 31e:	08 95       	ret

00000320 <SPI_Read_Byte>:
 320:	28 98       	cbi	0x05, 0	; 5
 322:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 32c:	28 9a       	sbi	0x05, 0	; 5
 32e:	08 95       	ret

00000330 <SPI_Write_Byte>:
 330:	cf 93       	push	r28
 332:	c6 2f       	mov	r28, r22
 334:	28 98       	cbi	0x05, 0	; 5
 336:	80 5e       	subi	r24, 0xE0	; 224
 338:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 33c:	8c 2f       	mov	r24, r28
 33e:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 342:	28 9a       	sbi	0x05, 0	; 5
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <payloadsizeChange>:
 348:	68 2f       	mov	r22, r24
 34a:	81 e1       	ldi	r24, 0x11	; 17
 34c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 350:	08 95       	ret

00000352 <nRF_Set_Addr_RX>:
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	06 2f       	mov	r16, r22
 35c:	28 98       	cbi	0x05, 0	; 5
 35e:	8a e2       	ldi	r24, 0x2A	; 42
 360:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 364:	00 23       	and	r16, r16
 366:	61 f0       	breq	.+24     	; 0x380 <nRF_Set_Addr_RX+0x2e>
 368:	c5 e0       	ldi	r28, 0x05	; 5
 36a:	d1 e0       	ldi	r29, 0x01	; 1
 36c:	01 50       	subi	r16, 0x01	; 1
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	0a 5f       	subi	r16, 0xFA	; 250
 372:	1e 4f       	sbci	r17, 0xFE	; 254
 374:	89 91       	ld	r24, Y+
 376:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 37a:	c0 17       	cp	r28, r16
 37c:	d1 07       	cpc	r29, r17
 37e:	d1 f7       	brne	.-12     	; 0x374 <nRF_Set_Addr_RX+0x22>
 380:	28 9a       	sbi	0x05, 0	; 5
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <nRF_Set_Addr_TX>:
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	06 2f       	mov	r16, r22
 396:	28 98       	cbi	0x05, 0	; 5
 398:	80 e3       	ldi	r24, 0x30	; 48
 39a:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 39e:	00 23       	and	r16, r16
 3a0:	61 f0       	breq	.+24     	; 0x3ba <nRF_Set_Addr_TX+0x2e>
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
 3a4:	d1 e0       	ldi	r29, 0x01	; 1
 3a6:	01 50       	subi	r16, 0x01	; 1
 3a8:	10 e0       	ldi	r17, 0x00	; 0
 3aa:	0f 5f       	subi	r16, 0xFF	; 255
 3ac:	1e 4f       	sbci	r17, 0xFE	; 254
 3ae:	89 91       	ld	r24, Y+
 3b0:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 3b4:	c0 17       	cp	r28, r16
 3b6:	d1 07       	cpc	r29, r17
 3b8:	d1 f7       	brne	.-12     	; 0x3ae <nRF_Set_Addr_TX+0x22>
 3ba:	28 9a       	sbi	0x05, 0	; 5
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	08 95       	ret

000003c6 <nRF_Flush_TX>:
 3c6:	28 98       	cbi	0x05, 0	; 5
 3c8:	81 ee       	ldi	r24, 0xE1	; 225
 3ca:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 3ce:	28 9a       	sbi	0x05, 0	; 5
 3d0:	08 95       	ret

000003d2 <nRF_TX_Mode>:
 3d2:	2d 98       	cbi	0x05, 5	; 5
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 90 01 	call	0x320	; 0x320 <SPI_Read_Byte>
 3da:	68 2f       	mov	r22, r24
 3dc:	6e 7f       	andi	r22, 0xFE	; 254
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 90 01 	call	0x320	; 0x320 <SPI_Read_Byte>
 3ea:	68 2f       	mov	r22, r24
 3ec:	62 60       	ori	r22, 0x02	; 2
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 3f4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF_Flush_TX>
 3f8:	60 e7       	ldi	r22, 0x70	; 112
 3fa:	87 e0       	ldi	r24, 0x07	; 7
 3fc:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 90 01 	call	0x320	; 0x320 <SPI_Read_Byte>
 406:	68 2f       	mov	r22, r24
 408:	60 63       	ori	r22, 0x30	; 48
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 410:	8b e2       	ldi	r24, 0x2B	; 43
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	08 95       	ret

0000041e <nRF_Flush_RX>:
 41e:	28 98       	cbi	0x05, 0	; 5
 420:	82 ee       	ldi	r24, 0xE2	; 226
 422:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 426:	28 9a       	sbi	0x05, 0	; 5
 428:	08 95       	ret

0000042a <nRF_RX_Mode>:
 42a:	2d 98       	cbi	0x05, 5	; 5
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 90 01 	call	0x320	; 0x320 <SPI_Read_Byte>
 432:	68 2f       	mov	r22, r24
 434:	63 60       	ori	r22, 0x03	; 3
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 43c:	0e 94 0f 02 	call	0x41e	; 0x41e <nRF_Flush_RX>
 440:	60 e7       	ldi	r22, 0x70	; 112
 442:	87 e0       	ldi	r24, 0x07	; 7
 444:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 90 01 	call	0x320	; 0x320 <SPI_Read_Byte>
 44e:	68 2f       	mov	r22, r24
 450:	60 63       	ori	r22, 0x30	; 48
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 458:	2d 9a       	sbi	0x05, 5	; 5
 45a:	8b e2       	ldi	r24, 0x2B	; 43
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <nRF_RX_Mode+0x34>
 462:	00 c0       	rjmp	.+0      	; 0x464 <nRF_RX_Mode+0x3a>
 464:	00 00       	nop
 466:	08 95       	ret

00000468 <nRF_Init>:
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 478:	63 e0       	ldi	r22, 0x03	; 3
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 480:	69 e6       	ldi	r22, 0x69	; 105
 482:	85 e0       	ldi	r24, 0x05	; 5
 484:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 488:	66 e2       	ldi	r22, 0x26	; 38
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 490:	65 e0       	ldi	r22, 0x05	; 5
 492:	85 e0       	ldi	r24, 0x05	; 5
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	0e 94 a9 01 	call	0x352	; 0x352 <nRF_Set_Addr_RX>
 49a:	65 e0       	ldi	r22, 0x05	; 5
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 c6 01 	call	0x38c	; 0x38c <nRF_Set_Addr_TX>
 4a4:	8a e0       	ldi	r24, 0x0A	; 10
 4a6:	0e 94 a4 01 	call	0x348	; 0x348 <payloadsizeChange>
 4aa:	6f e1       	ldi	r22, 0x1F	; 31
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 4b2:	0e 94 15 02 	call	0x42a	; 0x42a <nRF_RX_Mode>
 4b6:	8f e1       	ldi	r24, 0x1F	; 31
 4b8:	9e e4       	ldi	r25, 0x4E	; 78
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <nRF_Init+0x52>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <nRF_Init+0x58>
 4c0:	00 00       	nop
 4c2:	08 95       	ret

000004c4 <nRF_send_Payload>:
 4c4:	0f 93       	push	r16
 4c6:	1f 93       	push	r17
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	66 23       	and	r22, r22
 4ce:	71 f0       	breq	.+28     	; 0x4ec <nRF_send_Payload+0x28>
 4d0:	ec 01       	movw	r28, r24
 4d2:	61 50       	subi	r22, 0x01	; 1
 4d4:	06 2f       	mov	r16, r22
 4d6:	10 e0       	ldi	r17, 0x00	; 0
 4d8:	0f 5f       	subi	r16, 0xFF	; 255
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
 4dc:	08 0f       	add	r16, r24
 4de:	19 1f       	adc	r17, r25
 4e0:	89 91       	ld	r24, Y+
 4e2:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 4e6:	c0 17       	cp	r28, r16
 4e8:	d1 07       	cpc	r29, r17
 4ea:	d1 f7       	brne	.-12     	; 0x4e0 <nRF_send_Payload+0x1c>
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret

000004f6 <nRF_TX_Data>:
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	ec 01       	movw	r28, r24
 4fe:	16 2f       	mov	r17, r22
 500:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF_Flush_TX>
 504:	28 98       	cbi	0x05, 0	; 5
 506:	80 ea       	ldi	r24, 0xA0	; 160
 508:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 50c:	61 2f       	mov	r22, r17
 50e:	ce 01       	movw	r24, r28
 510:	0e 94 62 02 	call	0x4c4	; 0x4c4 <nRF_send_Payload>
 514:	28 9a       	sbi	0x05, 0	; 5
 516:	2d 9a       	sbi	0x05, 5	; 5
 518:	2d 98       	cbi	0x05, 5	; 5
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	08 95       	ret

00000522 <nRF_get_Status>:
 522:	28 98       	cbi	0x05, 0	; 5
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 52a:	28 9a       	sbi	0x05, 0	; 5
 52c:	08 95       	ret

0000052e <nRF_is_Sending>:
 52e:	0e 94 91 02 	call	0x522	; 0x522 <nRF_get_Status>
 532:	98 2f       	mov	r25, r24
 534:	90 73       	andi	r25, 0x30	; 48
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	09 f0       	breq	.+2      	; 0x53c <nRF_is_Sending+0xe>
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	08 95       	ret

0000053e <INT6_Init>:

void INT6_Init(void)
{
	EICRB &= ~(1 << ISC60) | (1 << ISC61);	//INT6 active when low
 53e:	ea e6       	ldi	r30, 0x6A	; 106
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	8f 7e       	andi	r24, 0xEF	; 239
 546:	80 83       	st	Z, r24
	EIMSK |= (1 << INT6);			//Enable INT6
 548:	ee 9a       	sbi	0x1d, 6	; 29
	sei();					//Enable global interrupts
 54a:	78 94       	sei
 54c:	08 95       	ret

0000054e <nRF_get_Payload>:
	SPI_Write_Byte(STATUS, (1 << RX_DR));
}

//Send and receive multiple bytes over SPI
void nRF_get_Payload(uint8_t len)
{
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
	uint8_t i;
	uint8_t data_in;
	uint8_t data_out = 0x00;
	for(i=0; i<len; i++)
 554:	88 23       	and	r24, r24
 556:	91 f0       	breq	.+36     	; 0x57c <nRF_get_Payload+0x2e>
 558:	18 2f       	mov	r17, r24
 55a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		data_in = SPI_Tranceiver(data_out);
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
 562:	d8 2f       	mov	r29, r24
		UART_Tx(data_in);
 564:	0e 94 be 00 	call	0x17c	; 0x17c <UART_Tx>
		if (data_in == 0xAA)
 568:	da 3a       	cpi	r29, 0xAA	; 170
 56a:	29 f4       	brne	.+10     	; 0x576 <nRF_get_Payload+0x28>
		{
			RX_Payload_cnt++;
 56c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <RX_Payload_cnt>
 570:	8f 5f       	subi	r24, 0xFF	; 255
 572:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <RX_Payload_cnt>
void nRF_get_Payload(uint8_t len)
{
	uint8_t i;
	uint8_t data_in;
	uint8_t data_out = 0x00;
	for(i=0; i<len; i++)
 576:	cf 5f       	subi	r28, 0xFF	; 255
 578:	1c 13       	cpse	r17, r28
 57a:	f0 cf       	rjmp	.-32     	; 0x55c <nRF_get_Payload+0xe>
		if (data_in == 0xAA)
		{
			RX_Payload_cnt++;
		}
	}
}
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	08 95       	ret

00000584 <__vector_7>:
	EIMSK |= (1 << INT6);			//Enable INT6
	sei();					//Enable global interrupts
}

ISR(INT6_vect)
{
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	11 24       	eor	r1, r1
 58e:	2f 93       	push	r18
 590:	3f 93       	push	r19
 592:	4f 93       	push	r20
 594:	5f 93       	push	r21
 596:	6f 93       	push	r22
 598:	7f 93       	push	r23
 59a:	8f 93       	push	r24
 59c:	9f 93       	push	r25
 59e:	af 93       	push	r26
 5a0:	bf 93       	push	r27
 5a2:	ef 93       	push	r30
 5a4:	ff 93       	push	r31
	cli();					//Disable global interrupt
 5a6:	f8 94       	cli

	PORTB &= ~_BV(CE); 			//Stop listening
 5a8:	2d 98       	cbi	0x05, 5	; 5
	// Pull down chip select
	PORTB &= ~_BV(CSN); //CSN low
 5aa:	28 98       	cbi	0x05, 0	; 5
	//_delay_us(10);
	// Send command to read RX payload
	SPI_Tranceiver(R_RX_PAYLOAD);
 5ac:	81 e6       	ldi	r24, 0x61	; 97
 5ae:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Tranceiver>
	//_delay_us(10);
	// Read payload
	nRF_get_Payload(PAYLOAD_QUAT_LEN);
 5b2:	8a e0       	ldi	r24, 0x0A	; 10
 5b4:	0e 94 a7 02 	call	0x54e	; 0x54e <nRF_get_Payload>
	//_delay_us(10);
	// Pull up chip select
	PORTB |= _BV(CSN);  //CSN high
 5b8:	28 9a       	sbi	0x05, 0	; 5
	//_delay_us(10);
	// Reset status register
	SPI_Write_Byte(STATUS, (1 << RX_DR));
 5ba:	60 e4       	ldi	r22, 0x40	; 64
 5bc:	87 e0       	ldi	r24, 0x07	; 7
 5be:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
}
 5c2:	ff 91       	pop	r31
 5c4:	ef 91       	pop	r30
 5c6:	bf 91       	pop	r27
 5c8:	af 91       	pop	r26
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	7f 91       	pop	r23
 5d0:	6f 91       	pop	r22
 5d2:	5f 91       	pop	r21
 5d4:	4f 91       	pop	r20
 5d6:	3f 91       	pop	r19
 5d8:	2f 91       	pop	r18
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti

000005e4 <nRF_Reset>:

void nRF_Reset(void)
{
	//_delay_us(10);
	//Reset IRQ-flags in status register
	SPI_Write_Byte(STATUS, 0x70);
 5e4:	60 e7       	ldi	r22, 0x70	; 112
 5e6:	87 e0       	ldi	r24, 0x07	; 7
 5e8:	0e 94 98 01 	call	0x330	; 0x330 <SPI_Write_Byte>
 5ec:	08 95       	ret

000005ee <main>:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	AVR_Init();
 5ee:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	i2c_init();
 5f2:	0e 94 41 03 	call	0x682	; 0x682 <i2c_init>
	UART_Init();
 5f6:	0e 94 a8 00 	call	0x150	; 0x150 <UART_Init>
	SPI_Init();
 5fa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SPI_Init>
	nRF_Init();
 5fe:	0e 94 34 02 	call	0x468	; 0x468 <nRF_Init>
	INT6_Init();
 602:	0e 94 9f 02 	call	0x53e	; 0x53e <INT6_Init>
	BNO_Init();
 606:	0e 94 c6 00 	call	0x18c	; 0x18c <BNO_Init>
	i2c_write(OPERATION_MODE_NDOF);			//Set operation mode to NDOF
	i2c_stop();
	_delay_ms(10);
*/	
	//Set node and IMU i.d.
	N1_payload_TX[0] = NODE_ID;
 60a:	e4 e1       	ldi	r30, 0x14	; 20
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	80 83       	st	Z, r24
	N1_payload_TX[1] = IMU_ID;
 612:	81 83       	std	Z+1, r24	; 0x01
	N1_payload_TX_QUAT[0] = NODE_ID;
 614:	ea e0       	ldi	r30, 0x0A	; 10
 616:	f1 e0       	ldi	r31, 0x01	; 1
 618:	80 83       	st	Z, r24
	N1_payload_TX_QUAT[1] = IMU_ID;
 61a:	81 83       	std	Z+1, r24	; 0x01
	//Initialize the received payload count
	RX_Payload_cnt = 0;
 61c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <RX_Payload_cnt>

	nRF_Flush_RX();
 620:	0e 94 0f 02 	call	0x41e	; 0x41e <nRF_Flush_RX>
	nRF_Reset();
 624:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <nRF_Reset>
	PORTB |= _BV(CE);			//Start listening
 628:	2d 9a       	sbi	0x05, 5	; 5

	//Endless Loop
	while(1)
	{	
		if (RX_Payload_cnt == PAYLOAD_LEN || RX_Payload_cnt == PAYLOAD_QUAT_LEN )
 62a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <RX_Payload_cnt>
 62e:	84 31       	cpi	r24, 0x14	; 20
 630:	21 f0       	breq	.+8      	; 0x63a <main+0x4c>
 632:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <RX_Payload_cnt>
 636:	8a 30       	cpi	r24, 0x0A	; 10
 638:	c1 f7       	brne	.-16     	; 0x62a <main+0x3c>
		{
			//Configure as Transmitter
			nRF_TX_Mode();
 63a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nRF_TX_Mode>
			if(RX_Payload_cnt == PAYLOAD_LEN)
 63e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <RX_Payload_cnt>
 642:	84 31       	cpi	r24, 0x14	; 20
 644:	41 f4       	brne	.+16     	; 0x656 <main+0x68>
			{

				BNO_Read_Acc_Mag_Gyr();
 646:	0e 94 28 01 	call	0x250	; 0x250 <BNO_Read_Acc_Mag_Gyr>
				nRF_TX_Data(N1_payload_TX, PAYLOAD_LEN);
 64a:	64 e1       	ldi	r22, 0x14	; 20
 64c:	84 e1       	ldi	r24, 0x14	; 20
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <nRF_TX_Data>
 654:	07 c0       	rjmp	.+14     	; 0x664 <main+0x76>
			}
			else
			{

				BNO_Read_Quaternions();
 656:	0e 94 fe 00 	call	0x1fc	; 0x1fc <BNO_Read_Quaternions>
				nRF_TX_Data(N1_payload_TX_QUAT, PAYLOAD_QUAT_LEN);
 65a:	6a e0       	ldi	r22, 0x0A	; 10
 65c:	8a e0       	ldi	r24, 0x0A	; 10
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <nRF_TX_Data>


			}

			while(nRF_is_Sending());
 664:	0e 94 97 02 	call	0x52e	; 0x52e <nRF_is_Sending>
 668:	81 11       	cpse	r24, r1
 66a:	fc cf       	rjmp	.-8      	; 0x664 <main+0x76>
			RX_Payload_cnt = 0;
 66c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <RX_Payload_cnt>
			//Configure as Receiver
			nRF_RX_Mode();
 670:	0e 94 15 02 	call	0x42a	; 0x42a <nRF_RX_Mode>
			nRF_Flush_RX();
 674:	0e 94 0f 02 	call	0x41e	; 0x41e <nRF_Flush_RX>
			nRF_Reset();
 678:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <nRF_Reset>
			PORTB |= _BV(CE);	//Start listening again
 67c:	2d 9a       	sbi	0x05, 5	; 5
			sei();
 67e:	78 94       	sei
 680:	d4 cf       	rjmp	.-88     	; 0x62a <main+0x3c>

00000682 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 682:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 686:	8c e0       	ldi	r24, 0x0C	; 12
 688:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 68c:	08 95       	ret

0000068e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 68e:	94 ea       	ldi	r25, 0xA4	; 164
 690:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 694:	ec eb       	ldi	r30, 0xBC	; 188
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	90 81       	ld	r25, Z
 69a:	99 23       	and	r25, r25
 69c:	ec f7       	brge	.-6      	; 0x698 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 69e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 6a2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 6a4:	98 30       	cpi	r25, 0x08	; 8
 6a6:	11 f0       	breq	.+4      	; 0x6ac <i2c_start+0x1e>
 6a8:	90 31       	cpi	r25, 0x10	; 16
 6aa:	a1 f4       	brne	.+40     	; 0x6d4 <i2c_start+0x46>

	// send device address
	TWDR = address;
 6ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 6b0:	84 e8       	ldi	r24, 0x84	; 132
 6b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 6b6:	ec eb       	ldi	r30, 0xBC	; 188
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	88 23       	and	r24, r24
 6be:	ec f7       	brge	.-6      	; 0x6ba <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 6c0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 6c4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 6c6:	98 31       	cpi	r25, 0x18	; 24
 6c8:	39 f0       	breq	.+14     	; 0x6d8 <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 34       	cpi	r25, 0x40	; 64
 6ce:	29 f4       	brne	.+10     	; 0x6da <i2c_start+0x4c>
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	08 95       	ret
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 6d8:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 6da:	08 95       	ret

000006dc <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 6e0:	ec eb       	ldi	r30, 0xBC	; 188
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 6e6:	a9 eb       	ldi	r26, 0xB9	; 185
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 6ea:	cb eb       	ldi	r28, 0xBB	; 187
 6ec:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 6ee:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 6f0:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 6f2:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 6f4:	90 81       	ld	r25, Z
 6f6:	99 23       	and	r25, r25
 6f8:	ec f7       	brge	.-6      	; 0x6f4 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 6fa:	9c 91       	ld	r25, X
 6fc:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 6fe:	98 30       	cpi	r25, 0x08	; 8
 700:	11 f0       	breq	.+4      	; 0x706 <i2c_start_wait+0x2a>
 702:	90 31       	cpi	r25, 0x10	; 16
 704:	b1 f7       	brne	.-20     	; 0x6f2 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 706:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 708:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 70a:	90 81       	ld	r25, Z
 70c:	99 23       	and	r25, r25
 70e:	ec f7       	brge	.-6      	; 0x70a <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 710:	9c 91       	ld	r25, X
 712:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 714:	90 32       	cpi	r25, 0x20	; 32
 716:	11 f0       	breq	.+4      	; 0x71c <i2c_start_wait+0x40>
 718:	98 35       	cpi	r25, 0x58	; 88
 71a:	29 f4       	brne	.+10     	; 0x726 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 71c:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 71e:	90 81       	ld	r25, Z
 720:	94 fd       	sbrc	r25, 4
 722:	fd cf       	rjmp	.-6      	; 0x71e <i2c_start_wait+0x42>
 724:	e6 cf       	rjmp	.-52     	; 0x6f2 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 72c:	0e 94 47 03 	call	0x68e	; 0x68e <i2c_start>

}/* i2c_rep_start */
 730:	08 95       	ret

00000732 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 732:	84 e9       	ldi	r24, 0x94	; 148
 734:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 738:	ec eb       	ldi	r30, 0xBC	; 188
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	84 fd       	sbrc	r24, 4
 740:	fd cf       	rjmp	.-6      	; 0x73c <i2c_stop+0xa>

}/* i2c_stop */
 742:	08 95       	ret

00000744 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 744:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 748:	84 e8       	ldi	r24, 0x84	; 132
 74a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 74e:	ec eb       	ldi	r30, 0xBC	; 188
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	88 23       	and	r24, r24
 756:	ec f7       	brge	.-6      	; 0x752 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 758:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 75c:	98 7f       	andi	r25, 0xF8	; 248
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	98 32       	cpi	r25, 0x28	; 40
 762:	09 f4       	brne	.+2      	; 0x766 <i2c_write+0x22>
 764:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 766:	08 95       	ret

00000768 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 768:	84 ec       	ldi	r24, 0xC4	; 196
 76a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));    
 76e:	ec eb       	ldi	r30, 0xBC	; 188
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	80 81       	ld	r24, Z
 774:	88 23       	and	r24, r24
 776:	ec f7       	brge	.-6      	; 0x772 <i2c_readAck+0xa>

    return TWDR;
 778:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readAck */
 77c:	08 95       	ret

0000077e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 77e:	84 e8       	ldi	r24, 0x84	; 132
 780:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));
 784:	ec eb       	ldi	r30, 0xBC	; 188
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	88 23       	and	r24, r24
 78c:	ec f7       	brge	.-6      	; 0x788 <i2c_readNak+0xa>
	
    return TWDR;
 78e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readNak */
 792:	08 95       	ret

00000794 <_exit>:
 794:	f8 94       	cli

00000796 <__stop_program>:
 796:	ff cf       	rjmp	.-2      	; 0x796 <__stop_program>
